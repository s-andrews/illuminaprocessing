#!/usr/bin/perl
use warnings;
use strict;
use DBI;
use POSIX ":sys_wait_h";

# Update 16 Sept 2020: Adapting this script to work with Nextflow instead of CF
# Update May '17: working again (+ easing of lockdown restrictions and beyond burgers)
# Update Feb '22: Adding a --prefix for the Nextflow command so we got better names for MultiQC
  # and bismark summary reports.


my $data_folder = "/bi/seqfac/seqfac";
my $working_folder = "/bi/scratch/run_processing";

my $copy_back_files_path = '/bi/apps/copy_back_files/latest/copy_back_files';
my $nextflow_path = '/bi/apps/nextflow/nextflow_pipelines/';

my $which_nf = `which nextflow`;
if ($which_nf eq ''){
	die "\n\nPlease run following command before launching the run folder analysis:\n\n     module load nextflow\n\n";
}
else{
	# warn "Output of which: $which_nf\n";
}


my %open_filehandles;

my $nf_version = `nextflow -v`;
warn ("$nf_version\n\n");

my %pipeline_mappings = (

		'4C'                                     => 'nf_chipseq',
		'Bisulfite-seq (PBAT)'                   => 'nf_bisulfite_PBAT',
		'Bisulfite-seq (Reduced Representation)' => 'nf_bisulfite_RRBS',
		'Bisulfite-seq (WGSBS)'                  => 'nf_bisulfite_WGBS',
		'scBS-seq'                               => 'nf_bisulfite_scBSseq',
		'scNMT-Seq'                              => 'nf_bisulfite_scNMT',
		'ChIA-Pet'                               => '',
		'CHiC'                                   => '',
		'CLIP-Seq'                               => 'nf_chipseq',
		'e4C'                                    => '',
		'formylC-DIP'                            => 'nf_chipseq', 
		'Genomic DNA'                            => 'nf_chipseq',
		'HiC'                                    => '',
		'Histone ChIP'                           => 'nf_chipseq', 
		'hMeDIP'                                 => 'nf_chipseq',
		'MeDIP'                                  => 'nf_chipseq',
		'oxBS'                                   => 'nf_bisulfite_WGBS',
		'Protein ChIP'                           => 'nf_chipseq',
		'Ribosome footprinting'                  => 'nf_rnaseq',
		'RNA-Seq'                                => 'nf_rnaseq',
		'Small RNA'                              => 'nf_rnaseq',
		'ATAC-Seq'                               => 'nf_chipseq',
		);


my ($run_folder,@lanes) = @ARGV;

unless ($run_folder) {
    die "Usage is analyse_run_folder_headstone [run_folder] [list of lanes (optional - default all)]\n";
}

if (@lanes) {

    my $warning = 0;
    foreach my $lane (@lanes) {
		unless ($lane =~ /^\d+$/) {
			warn "Invalid lane number '$lane'\n";
			++$warning;
		}
    }

    die "Please fix lane ids and retry\n" if ($warning);

}
else {
    @lanes = get_lanes($run_folder);
}

my $dbh = DBI->connect("DBI:mysql:database=sierra;host=bilin2.babraham.ac.uk;port=3306","sierrauser","",{RaiseError=>0,AutoCommit=>1});

unless ($dbh) {
    die "Can't connect to sierra database\n";
}

# Make a working folder for the run
### TODO: Change back to "die"
mkdir("$working_folder/$run_folder") or warn "Can't make working folder $working_folder/$run_folder: $!";
chdir("$working_folder/$run_folder") or die "Can't move to $working_folder/$run_folder: $!";

my %job_ids_to_wait_for;

foreach my $lane (@lanes) {
    my $id = process_lane($run_folder,$lane);
	$job_ids_to_wait_for{$lane} = $id;
}


# Now we have to wait until all of the jobs we submitted have exited
warn "Started waiting for jobs to complete at ".scalar localtime(time)."\n";
while (1) {

	my ($lane) = find_completed_lane();
	# warn "Lane processing hasn't finished just yet...\n";
	if ($lane) {
		copy_back_lane($run_folder,$lane);
	}
	else {
		sleep(10);
	}

	last unless (%job_ids_to_wait_for);

}

warn "All jobs complete at ".scalar localtime(time)."\n";


sub process_lane {
    my ($run_folder,$lane) = @_;
	
	my $prefix = ""; # need this for MultiQC and Bismark Summary reports

    warn "Processing $run_folder lane $lane\n";

	# First find out which pipeline and genome we're using
	my ($pipeline,$genome) = get_pipeline($run_folder,$lane);

	unless ($pipeline) {
			warn "No pipeline specified for lane $lane, giving up\n";
			return;
	}

	unless ($genome) {
			warn "No genome found for automated analysis, giving up\n";
	}

	unless (exists $pipeline_mappings{$pipeline}) {
			warn "No pipeline mapping for '$pipeline', giving up\n";
			return;
	}

	unless ($pipeline_mappings{$pipeline}) {
			warn "No automated pipeline to analyse '$pipeline', giving up\n";
			return;
	}

	warn "Pipeline is $pipeline, Genome is $genome\n";

	my $pipeline_name_sierra = $pipeline;
	
	$pipeline = $pipeline_mappings{$pipeline};

    my @barcodes = get_barcodes($run_folder,$lane);

	my @files_to_link;
	my @linked_files;

    if (@barcodes) {
		# We just link in all of the extracted barcode files
		@files_to_link = get_split_fastq_file_names($run_folder,$lane);
    }
	else {
		# We need to figure out which are the main reads and link in those
		my %read_numbers = get_read_numbers_for_run_folder($run_folder);
		if ($read_numbers{read_1}) {
				push @files_to_link, get_fastq_file_name($run_folder,$lane,$read_numbers{read_1});
		}

		if ($read_numbers{read_2}) {
				push @files_to_link, get_fastq_file_name($run_folder,$lane,$read_numbers{read_2});
		}
	}

	# Now we need to link these files into the working directory
	foreach my $file (@files_to_link) {
		warn "Linking $file\n";

		# Setting the prefix
		unless ($prefix){
			$prefix = $file;
			# warn "$prefix\n";
			$prefix =~ s/.*\///;
			# warn "$prefix\n";
			my $prefix_lane_number;
			my $prefix_laneID;
			# first word/characters up to an underscore _
			if ($prefix =~ /^(.*?)_/){
				$prefix_lane_number = $1;
			}
			else{
				$prefix_lane_number = "filename_had_no_underscores";
			}
			# warn "$prefix_lane_number\n";

			# Extracting the laneID
			if ($prefix =~ /(L00\d)/){
				$prefix_laneID = $1;
			}
			else{
				$prefix_laneID= "filename_had_no_laneID";
			}
			# warn "$prefix_laneID\n";		
			$prefix = "${prefix_lane_number}_${prefix_laneID}_";
			# warn "$prefix\n";
		}
		
		my $just_file = (split(/\//,$file))[-1];
		symlink($file,$just_file) or die "Can't symlink $file: $!";
		push @linked_files, $just_file;
	}
	
	# NOTE: The parameter $single_end_parameter MUST NOT preceed @linked files, or the first file will be consumed by the argument to $single_end_parameter
	my $single_end_parameter = '';
	if ($pipeline_name_sierra eq 'scBS-seq' or $pipeline_name_sierra eq 'scNMT-Seq'){
		$single_end_parameter = '--single_end';
		warn "scBS-seq or scSNMT-seq require processing in single end mode. Setting --single_end\n\n";
	}

	# We need to tell Nextflow not to read (and write) to the terminal window, as this will lead to the command causing the 
	# script to sleep when wrapped in """ nohup analise_run_folder FOLDERNAME & """" (reading input from nohup won't work)
	
	# There are two ways around this:
	### (a) telling nextflow to to print anything with -quiet
	### my $cluster_command = "nextflow -quiet run ${nextflow_path}$pipeline $single_end_parameter --genome $genome @linked_files";

	### or (b) not using the ansi-log. This will write the executed commands to the log, but not try overwrite itself in place
	my $cluster_command = "${nextflow_path}$pipeline $single_end_parameter --genome $genome @linked_files -ansi-log false --prefix $prefix";
	
	#my $cluster_command = "${nextflow_path}$pipeline $single_end_parameter --genome $genome @linked_files 2>&1 |";
	warn "Launching the following Cluster command:\n$cluster_command\n";
	
	# my $job_id = open (my $fh, $cluster_command) or die "Can't open pipe to Nextflow: $!";
	my $job_id = fork() or exec($cluster_command);

	# my $job_id = open (my $fh, $cluster_command) or die "Can't open pipe to Nextflow: $!";

	# Storing open filehandles. We need to close them later once the Nextflow process has completed
	# We can determine this using `ps --pid PID` and checking for the presence of <defunct> in its output
	# $open_filehandles{$lane} = $fh;
	warn "The current pid is: $job_id\n\n";
	
	return ($job_id);

}

sub get_read_numbers_for_run_folder {

	my ($run_folder) = @_;

	open (INFO,"$data_folder/$run_folder/RunInfo.xml") or die "Can't find $data_folder/$run_folder/RunInfo.xml: $!";

	my $read_count = 1;
	my $barcode_count = 1;

	my %read_numbers;

	while (<INFO>) {
		if (/Read Number="(\d+)" NumCycles="\d+" IsIndexedRead="([YN])"/) {
			if ($2 eq 'Y') {
					$read_numbers{"barcode_$barcode_count"} = $1;
					++$barcode_count;
			}
			elsif ($2 eq 'N') {
					$read_numbers{"read_$read_count"} = $1;
					++$read_count;
			}
			else {
					die "Didn't understand index $2";
			}
		}

		# MiSeq RunInfo has a different structure
		elsif (/Read NumCycles="\d+" Number="(\d+)" IsIndexedRead="([YN])"/) {
			if ($2 eq 'Y') {
					$read_numbers{"barcode_$barcode_count"} = $1;
					++$barcode_count;
			}
			elsif ($2 eq 'N') {
					$read_numbers{"read_$read_count"} = $1;
					++$read_count;
			}
			else {
					die "Didn't understand index $2";
			}
		}

	}

	close INFO;

	unless (%read_numbers) {
		die "Found no valid read numbers from $data_folder/$run_folder/RunInfo.xml";
	}

	return %read_numbers;

}

sub get_pipeline {

	my ($run_folder,$lane) = @_;

    my $sth = $dbh->prepare("select sample_type.name, search_database.assembly from run,lane,sample,sample_type,search_database where run.run_folder_name=? and run.flowcell_id=lane.flowcell_id and lane.lane_number=? and lane.sample_id=sample.id and sample.search_database_id=search_database.id and sample.sample_type_id=sample_type.id");

    $sth -> execute($run_folder,$lane) or die "Can't list barcodes for $run_folder, $lane: ".$dbh->errstr();
		
	my ($pipeline,$assembly) = $sth->fetchrow_array();

	return () unless ($pipeline); # There is no pipeline

	return ($pipeline,$assembly);

}

sub get_barcodes {
    my ($run_folder,$lane) = @_;
		
    my @barcodes;
    my $prime5_count = 0;
    my $prime3_count = 0;

    my $sth = $dbh->prepare("select barcode.5_prime_barcode,barcode.3_prime_barcode,barcode.name from run,flowcell,lane,barcode WHERE run.run_folder_name = ? and run.flowcell_id=flowcell.id AND run.flowcell_id=lane.flowcell_id AND lane.lane_number = ? AND lane.sample_id = barcode.sample_id");

    $sth -> execute($run_folder,$lane) or die "Can't list barcodes for $run_folder, $lane: ".$dbh->errstr();

    while (my ($prime5,$prime3,$name) = $sth->fetchrow_array()) {
				my $barcode_name = $prime5;
				$barcode_name .= "_$prime3" if ($prime3);
				warn "Found Sierra barcode ${barcode_name}_$name\n";
				++$prime5_count if ($prime5);
				++$prime3_count if ($prime3);
				push @barcodes, [$prime5,$prime3,$name];
    }

    warn "\n";

    # Do some sanity checks
    if ($prime3_count > 0 && $prime3_count != $prime5_count) {
				warn "Strange barcodes, Number of 3' barcodes was not the same as the number of 5' and wasn't zero either\n";
				return ();
    }
    
    for (1..$#barcodes) {
				if (length($barcodes[$_]->[0]) != length($barcodes[$_-1]->[0])) {
						warn "Barcodes didn't all have the same length at the 5' end\n";
						return ();
				}
				if ($barcodes[$_]->[1] and (length($barcodes[$_]->[0]) != length($barcodes[$_-1]->[0]))) {
						warn "Barcodes didn't all have the same length at the 3' end\n";
						return ();
				}
    }

    return @barcodes;
    

}

sub get_lanes {
    my ($run_folder) = @_;

    my $dir = "$data_folder/$run_folder";

    unless (-e $dir) {
		die "Couldn't find the specified run folder at '$dir'\n";
    }

    my @lane_directories = <$dir/Unaligned/Project*/Sample_lane*>;

    my @lanes;

    foreach my $lane_path (@lane_directories) {
				if ($lane_path =~ /Sample_lane(\d+)/) {
						push @lanes, $1;
				}
				else {
						warn "Couldn't extract a lane number from $lane_path\n";
				}
    }

    unless (@lanes) {
				die "Couldn't find any valid lanes undef $dir\n";
    }

    return @lanes;

}

sub get_fastq_file_name {
		my ($run_folder,$lane,$read_number) = @_;

		my @files = <$data_folder/$run_folder/Unaligned/Project*/Sample_lane$lane/lane*_NoIndex_L00${lane}_R${read_number}.fastq.gz>;

		if (@files == 1) {
				return $files[0];
		}
		elsif (@files) {
				warn "Found multiple hits to read $read_number in lane $lane of $run_folder\n";
				return undef;
		}
		else {
				warn "Found no hits to read $read_number in lane $lane of $run_folder\n";
				return undef;
		}
}

sub get_split_fastq_file_names {
	my ($run_folder,$lane) = @_;

	my @files = <$data_folder/$run_folder/Unaligned/Project*/Sample_lane$lane/lane*_L00${lane}_*.fastq.gz>;

	my @keepers;

	foreach (@files) {
		next if (/NoCode/);
		next if (/NoIndex/);
		push @keepers,$_;
	}
	
	return @keepers;
}

sub find_completed_lane {

		# Now go through the jobs we're waiting for and see if any of their
		# ids are still active

		LANE: foreach my $lane (keys %job_ids_to_wait_for) {
				# warn "lane $lane\n";

				# this way would probably work as well, but we now went for the the waitpid solution and use POSIX	
				# my $output = `ps --pid $job_ids_to_wait_for{$lane}`;
				# warn "$output\n";
				
				# This is an example output:
				# PID TTY          TIME CMD
 				# 94507 pts/7    00:00:10 java
				
				if (waitpid ($job_ids_to_wait_for{$lane},WNOHANG) == 0 ){
					# warn "Process $job_ids_to_wait_for{$lane} is still running...\n";
					# if ($output =~ /defunct/){
					# 	warn "Closing defunct filehandle...\n";
					# 	close $open_filehandles{$lane} or warn "Failed to close filehandle for $lane\n\n";
					# 	# next time round this should no longer evaluate true
					# }
					next LANE;
				}
				else{
					warn "Process $job_ids_to_wait_for{$lane} appears to have completed ...\n";
					delete $job_ids_to_wait_for{$lane};
					# If we get here then $lane has completed all jobs
					return ($lane);
				}
		}

}

sub copy_back_lane {

		my ($run_folder,$lane) = @_;

		my @files = <*_L00${lane}_*>;

		system($copy_back_files_path,$run_folder,@files) == 0 or die "Failed to copy back files for $run_folder lane $lane";

		# TODO: Delete the files for this lane?

}
